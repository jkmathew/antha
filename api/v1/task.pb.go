// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/jkmathew/antha/api/v1/task.proto

package org_antha_lang_antha_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Task struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Short description
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	// Long description
	Details string `protobuf:"bytes,3,opt,name=details" json:"details,omitempty"`
	// If device task, the device id
	DeviceId string `protobuf:"bytes,4,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	// Time estimate in seconds, 0 if no estimate available
	TimeEstimate float32 `protobuf:"fixed32,5,opt,name=time_estimate,json=timeEstimate" json:"time_estimate,omitempty"`
	// Task ids that must happen before this task
	HappensBefore []string `protobuf:"bytes,6,rep,name=happens_before,json=happensBefore" json:"happens_before,omitempty"`
	// Status of a task
	Status *Status `protobuf:"bytes,7,opt,name=status" json:"status,omitempty"`
	// Tags
	Tags []string `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	// Types that are valid to be assigned to Task:
	//	*Task_OrderTask
	//	*Task_DeckLayoutTask
	//	*Task_PlatePrepTask
	//	*Task_DocumentTask
	//	*Task_MixerTask
	//	*Task_ManualRunTask
	//	*Task_IncubateTask
	//	*Task_DataUploadTask
	Task isTask_Task `protobuf_oneof:"task"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type isTask_Task interface {
	isTask_Task()
}

type Task_OrderTask struct {
	OrderTask *OrderTask `protobuf:"bytes,9,opt,name=order_task,json=orderTask,oneof"`
}
type Task_DeckLayoutTask struct {
	DeckLayoutTask *DeckLayoutTask `protobuf:"bytes,10,opt,name=deck_layout_task,json=deckLayoutTask,oneof"`
}
type Task_PlatePrepTask struct {
	PlatePrepTask *PlatePrepTask `protobuf:"bytes,11,opt,name=plate_prep_task,json=platePrepTask,oneof"`
}
type Task_DocumentTask struct {
	DocumentTask *DocumentTask `protobuf:"bytes,12,opt,name=document_task,json=documentTask,oneof"`
}
type Task_MixerTask struct {
	MixerTask *MixerTask `protobuf:"bytes,13,opt,name=mixer_task,json=mixerTask,oneof"`
}
type Task_ManualRunTask struct {
	ManualRunTask *ManualRunTask `protobuf:"bytes,14,opt,name=manual_run_task,json=manualRunTask,oneof"`
}
type Task_IncubateTask struct {
	IncubateTask *IncubateTask `protobuf:"bytes,15,opt,name=incubate_task,json=incubateTask,oneof"`
}
type Task_DataUploadTask struct {
	DataUploadTask *DataUploadTask `protobuf:"bytes,16,opt,name=data_upload_task,json=dataUploadTask,oneof"`
}

func (*Task_OrderTask) isTask_Task()      {}
func (*Task_DeckLayoutTask) isTask_Task() {}
func (*Task_PlatePrepTask) isTask_Task()  {}
func (*Task_DocumentTask) isTask_Task()   {}
func (*Task_MixerTask) isTask_Task()      {}
func (*Task_ManualRunTask) isTask_Task()  {}
func (*Task_IncubateTask) isTask_Task()   {}
func (*Task_DataUploadTask) isTask_Task() {}

func (m *Task) GetTask() isTask_Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Task) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *Task) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *Task) GetTimeEstimate() float32 {
	if m != nil {
		return m.TimeEstimate
	}
	return 0
}

func (m *Task) GetHappensBefore() []string {
	if m != nil {
		return m.HappensBefore
	}
	return nil
}

func (m *Task) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Task) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Task) GetOrderTask() *OrderTask {
	if x, ok := m.GetTask().(*Task_OrderTask); ok {
		return x.OrderTask
	}
	return nil
}

func (m *Task) GetDeckLayoutTask() *DeckLayoutTask {
	if x, ok := m.GetTask().(*Task_DeckLayoutTask); ok {
		return x.DeckLayoutTask
	}
	return nil
}

func (m *Task) GetPlatePrepTask() *PlatePrepTask {
	if x, ok := m.GetTask().(*Task_PlatePrepTask); ok {
		return x.PlatePrepTask
	}
	return nil
}

func (m *Task) GetDocumentTask() *DocumentTask {
	if x, ok := m.GetTask().(*Task_DocumentTask); ok {
		return x.DocumentTask
	}
	return nil
}

func (m *Task) GetMixerTask() *MixerTask {
	if x, ok := m.GetTask().(*Task_MixerTask); ok {
		return x.MixerTask
	}
	return nil
}

func (m *Task) GetManualRunTask() *ManualRunTask {
	if x, ok := m.GetTask().(*Task_ManualRunTask); ok {
		return x.ManualRunTask
	}
	return nil
}

func (m *Task) GetIncubateTask() *IncubateTask {
	if x, ok := m.GetTask().(*Task_IncubateTask); ok {
		return x.IncubateTask
	}
	return nil
}

func (m *Task) GetDataUploadTask() *DataUploadTask {
	if x, ok := m.GetTask().(*Task_DataUploadTask); ok {
		return x.DataUploadTask
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Task) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Task_OneofMarshaler, _Task_OneofUnmarshaler, _Task_OneofSizer, []interface{}{
		(*Task_OrderTask)(nil),
		(*Task_DeckLayoutTask)(nil),
		(*Task_PlatePrepTask)(nil),
		(*Task_DocumentTask)(nil),
		(*Task_MixerTask)(nil),
		(*Task_ManualRunTask)(nil),
		(*Task_IncubateTask)(nil),
		(*Task_DataUploadTask)(nil),
	}
}

func _Task_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Task)
	// task
	switch x := m.Task.(type) {
	case *Task_OrderTask:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OrderTask); err != nil {
			return err
		}
	case *Task_DeckLayoutTask:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeckLayoutTask); err != nil {
			return err
		}
	case *Task_PlatePrepTask:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlatePrepTask); err != nil {
			return err
		}
	case *Task_DocumentTask:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DocumentTask); err != nil {
			return err
		}
	case *Task_MixerTask:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MixerTask); err != nil {
			return err
		}
	case *Task_ManualRunTask:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ManualRunTask); err != nil {
			return err
		}
	case *Task_IncubateTask:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IncubateTask); err != nil {
			return err
		}
	case *Task_DataUploadTask:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataUploadTask); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Task.Task has unexpected type %T", x)
	}
	return nil
}

func _Task_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Task)
	switch tag {
	case 9: // task.order_task
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OrderTask)
		err := b.DecodeMessage(msg)
		m.Task = &Task_OrderTask{msg}
		return true, err
	case 10: // task.deck_layout_task
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeckLayoutTask)
		err := b.DecodeMessage(msg)
		m.Task = &Task_DeckLayoutTask{msg}
		return true, err
	case 11: // task.plate_prep_task
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlatePrepTask)
		err := b.DecodeMessage(msg)
		m.Task = &Task_PlatePrepTask{msg}
		return true, err
	case 12: // task.document_task
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DocumentTask)
		err := b.DecodeMessage(msg)
		m.Task = &Task_DocumentTask{msg}
		return true, err
	case 13: // task.mixer_task
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MixerTask)
		err := b.DecodeMessage(msg)
		m.Task = &Task_MixerTask{msg}
		return true, err
	case 14: // task.manual_run_task
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ManualRunTask)
		err := b.DecodeMessage(msg)
		m.Task = &Task_ManualRunTask{msg}
		return true, err
	case 15: // task.incubate_task
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IncubateTask)
		err := b.DecodeMessage(msg)
		m.Task = &Task_IncubateTask{msg}
		return true, err
	case 16: // task.data_upload_task
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataUploadTask)
		err := b.DecodeMessage(msg)
		m.Task = &Task_DataUploadTask{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Task_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Task)
	// task
	switch x := m.Task.(type) {
	case *Task_OrderTask:
		s := proto.Size(x.OrderTask)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Task_DeckLayoutTask:
		s := proto.Size(x.DeckLayoutTask)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Task_PlatePrepTask:
		s := proto.Size(x.PlatePrepTask)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Task_DocumentTask:
		s := proto.Size(x.DocumentTask)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Task_MixerTask:
		s := proto.Size(x.MixerTask)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Task_ManualRunTask:
		s := proto.Size(x.ManualRunTask)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Task_IncubateTask:
		s := proto.Size(x.IncubateTask)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Task_DataUploadTask:
		s := proto.Size(x.DataUploadTask)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Order inventory items
type OrderTask struct {
	// Inventory items to order
	InventoryIds []string `protobuf:"bytes,1,rep,name=inventory_ids,json=inventoryIds" json:"inventory_ids,omitempty"`
}

func (m *OrderTask) Reset()                    { *m = OrderTask{} }
func (m *OrderTask) String() string            { return proto.CompactTextString(m) }
func (*OrderTask) ProtoMessage()               {}
func (*OrderTask) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *OrderTask) GetInventoryIds() []string {
	if m != nil {
		return m.InventoryIds
	}
	return nil
}

// Show deck layout for mixer
type DeckLayoutTask struct {
	// Mixer task to show deck layout of
	MixerTaskId string `protobuf:"bytes,1,opt,name=mixer_task_id,json=mixerTaskId" json:"mixer_task_id,omitempty"`
	// If present, restrict layout to given deck positions, e.g.,
	SomePositions []*OrdinalCoord `protobuf:"bytes,2,rep,name=some_positions,json=somePositions" json:"some_positions,omitempty"`
}

func (m *DeckLayoutTask) Reset()                    { *m = DeckLayoutTask{} }
func (m *DeckLayoutTask) String() string            { return proto.CompactTextString(m) }
func (*DeckLayoutTask) ProtoMessage()               {}
func (*DeckLayoutTask) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *DeckLayoutTask) GetMixerTaskId() string {
	if m != nil {
		return m.MixerTaskId
	}
	return ""
}

func (m *DeckLayoutTask) GetSomePositions() []*OrdinalCoord {
	if m != nil {
		return m.SomePositions
	}
	return nil
}

// Prepare plates
type PlatePrepTask struct {
	// Plates to prepare
	PlatePreps []*PlatePrep `protobuf:"bytes,1,rep,name=plate_preps,json=platePreps" json:"plate_preps,omitempty"`
}

func (m *PlatePrepTask) Reset()                    { *m = PlatePrepTask{} }
func (m *PlatePrepTask) String() string            { return proto.CompactTextString(m) }
func (*PlatePrepTask) ProtoMessage()               {}
func (*PlatePrepTask) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *PlatePrepTask) GetPlatePreps() []*PlatePrep {
	if m != nil {
		return m.PlatePreps
	}
	return nil
}

// Prepare a plate
type PlatePrep struct {
	// Plate to prepare
	PlateId string `protobuf:"bytes,1,opt,name=plate_id,json=plateId" json:"plate_id,omitempty"`
	// If present, restrict prep to given well addresses, e.g., A1, BB2
	SomeWells []*OrdinalCoord `protobuf:"bytes,2,rep,name=some_wells,json=someWells" json:"some_wells,omitempty"`
}

func (m *PlatePrep) Reset()                    { *m = PlatePrep{} }
func (m *PlatePrep) String() string            { return proto.CompactTextString(m) }
func (*PlatePrep) ProtoMessage()               {}
func (*PlatePrep) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *PlatePrep) GetPlateId() string {
	if m != nil {
		return m.PlateId
	}
	return ""
}

func (m *PlatePrep) GetSomeWells() []*OrdinalCoord {
	if m != nil {
		return m.SomeWells
	}
	return nil
}

// Show documentation
type DocumentTask struct {
	// Unformated text to show
	TextBody string `protobuf:"bytes,1,opt,name=text_body,json=textBody" json:"text_body,omitempty"`
}

func (m *DocumentTask) Reset()                    { *m = DocumentTask{} }
func (m *DocumentTask) String() string            { return proto.CompactTextString(m) }
func (*DocumentTask) ProtoMessage()               {}
func (*DocumentTask) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *DocumentTask) GetTextBody() string {
	if m != nil {
		return m.TextBody
	}
	return ""
}

// Run mixer
type MixerTask struct {
	// Setup: input state of device
	Before []*MixerState `protobuf:"bytes,1,rep,name=before" json:"before,omitempty"`
	// Result: output state of device
	After []*MixerState `protobuf:"bytes,2,rep,name=after" json:"after,omitempty"`
	// Low level device calls representing this task
	Calls []*GrpcCall `protobuf:"bytes,3,rep,name=calls" json:"calls,omitempty"`
}

func (m *MixerTask) Reset()                    { *m = MixerTask{} }
func (m *MixerTask) String() string            { return proto.CompactTextString(m) }
func (*MixerTask) ProtoMessage()               {}
func (*MixerTask) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *MixerTask) GetBefore() []*MixerState {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *MixerTask) GetAfter() []*MixerState {
	if m != nil {
		return m.After
	}
	return nil
}

func (m *MixerTask) GetCalls() []*GrpcCall {
	if m != nil {
		return m.Calls
	}
	return nil
}

type MixerState struct {
	Items      []*InventoryItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Placements []*Placement     `protobuf:"bytes,2,rep,name=placements" json:"placements,omitempty"`
}

func (m *MixerState) Reset()                    { *m = MixerState{} }
func (m *MixerState) String() string            { return proto.CompactTextString(m) }
func (*MixerState) ProtoMessage()               {}
func (*MixerState) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *MixerState) GetItems() []*InventoryItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *MixerState) GetPlacements() []*Placement {
	if m != nil {
		return m.Placements
	}
	return nil
}

type Placement struct {
	Parent string `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	Child  string `protobuf:"bytes,2,opt,name=child" json:"child,omitempty"`
	// Symbolic location of child in coordinate system of parent
	Coord *OrdinalCoord `protobuf:"bytes,3,opt,name=coord" json:"coord,omitempty"`
}

func (m *Placement) Reset()                    { *m = Placement{} }
func (m *Placement) String() string            { return proto.CompactTextString(m) }
func (*Placement) ProtoMessage()               {}
func (*Placement) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *Placement) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Placement) GetChild() string {
	if m != nil {
		return m.Child
	}
	return ""
}

func (m *Placement) GetCoord() *OrdinalCoord {
	if m != nil {
		return m.Coord
	}
	return nil
}

// Manually initiated task
type ManualRunTask struct {
}

func (m *ManualRunTask) Reset()                    { *m = ManualRunTask{} }
func (m *ManualRunTask) String() string            { return proto.CompactTextString(m) }
func (*ManualRunTask) ProtoMessage()               {}
func (*ManualRunTask) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

// Run incubator
type IncubateTask struct {
}

func (m *IncubateTask) Reset()                    { *m = IncubateTask{} }
func (m *IncubateTask) String() string            { return proto.CompactTextString(m) }
func (*IncubateTask) ProtoMessage()               {}
func (*IncubateTask) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

// Upload data
type DataUploadTask struct {
}

func (m *DataUploadTask) Reset()                    { *m = DataUploadTask{} }
func (m *DataUploadTask) String() string            { return proto.CompactTextString(m) }
func (*DataUploadTask) ProtoMessage()               {}
func (*DataUploadTask) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func init() {
	proto.RegisterType((*Task)(nil), "org.antha_lang.antha.v1.Task")
	proto.RegisterType((*OrderTask)(nil), "org.antha_lang.antha.v1.OrderTask")
	proto.RegisterType((*DeckLayoutTask)(nil), "org.antha_lang.antha.v1.DeckLayoutTask")
	proto.RegisterType((*PlatePrepTask)(nil), "org.antha_lang.antha.v1.PlatePrepTask")
	proto.RegisterType((*PlatePrep)(nil), "org.antha_lang.antha.v1.PlatePrep")
	proto.RegisterType((*DocumentTask)(nil), "org.antha_lang.antha.v1.DocumentTask")
	proto.RegisterType((*MixerTask)(nil), "org.antha_lang.antha.v1.MixerTask")
	proto.RegisterType((*MixerState)(nil), "org.antha_lang.antha.v1.MixerState")
	proto.RegisterType((*Placement)(nil), "org.antha_lang.antha.v1.Placement")
	proto.RegisterType((*ManualRunTask)(nil), "org.antha_lang.antha.v1.ManualRunTask")
	proto.RegisterType((*IncubateTask)(nil), "org.antha_lang.antha.v1.IncubateTask")
	proto.RegisterType((*DataUploadTask)(nil), "org.antha_lang.antha.v1.DataUploadTask")
}

func init() { proto.RegisterFile("github.com/jkmathew/antha/api/v1/task.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 813 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcb, 0x8e, 0xdb, 0x36,
	0x14, 0xad, 0x3c, 0x63, 0xcf, 0xe8, 0x8e, 0xa5, 0x19, 0x10, 0x45, 0xab, 0xa6, 0x8b, 0xba, 0x0a,
	0x92, 0x1a, 0x28, 0x62, 0x27, 0xe9, 0x22, 0x28, 0xd2, 0x95, 0x9d, 0xa2, 0x35, 0x30, 0x41, 0x0c,
	0x25, 0x45, 0x97, 0x02, 0x2d, 0x32, 0x36, 0x61, 0x4a, 0x14, 0x44, 0xca, 0x8d, 0xb7, 0xfd, 0x80,
	0x7e, 0x51, 0x3f, 0xac, 0xcb, 0x82, 0x0f, 0x69, 0xec, 0x85, 0x1f, 0xd9, 0xe9, 0x1e, 0x9e, 0x73,
	0xc4, 0xfb, 0x20, 0x09, 0xcf, 0x96, 0x4c, 0xad, 0xea, 0xc5, 0x28, 0x13, 0xf9, 0x18, 0x17, 0x6a,
	0x85, 0x9f, 0x71, 0x5c, 0x2c, 0xed, 0xe7, 0x18, 0x97, 0x6c, 0xbc, 0x79, 0x31, 0x56, 0x58, 0xae,
	0x47, 0x65, 0x25, 0x94, 0x40, 0x5f, 0x8b, 0x6a, 0x39, 0x32, 0x8b, 0xa9, 0xe6, 0xd9, 0xcf, 0xd1,
	0xe6, 0xc5, 0xa3, 0xd1, 0x19, 0x3e, 0x99, 0x10, 0x15, 0xb1, 0x46, 0x8f, 0x5e, 0x9e, 0xc1, 0x67,
	0xc5, 0x86, 0x16, 0x4a, 0x54, 0x5b, 0xa7, 0x79, 0x7e, 0x86, 0x26, 0xa7, 0x52, 0xe2, 0x25, 0x75,
	0x8a, 0x73, 0x76, 0x25, 0x15, 0x56, 0x8e, 0x1f, 0xff, 0xd7, 0x83, 0xcb, 0x0f, 0x58, 0xae, 0x51,
	0x08, 0x1d, 0x46, 0x22, 0x6f, 0xe0, 0x0d, 0xfd, 0xa4, 0xc3, 0x08, 0xfa, 0x12, 0xba, 0x1c, 0x2f,
	0x28, 0x8f, 0x3a, 0x06, 0xb2, 0x01, 0x8a, 0xe0, 0x8a, 0x50, 0x85, 0x19, 0x97, 0xd1, 0x85, 0xc1,
	0x9b, 0x10, 0x7d, 0x0b, 0x3e, 0xa1, 0x1b, 0x96, 0xd1, 0x94, 0x91, 0xe8, 0xd2, 0xac, 0x5d, 0x5b,
	0x60, 0x46, 0xd0, 0x63, 0x08, 0x14, 0xcb, 0x69, 0x4a, 0xa5, 0x62, 0x39, 0x56, 0x34, 0xea, 0x0e,
	0xbc, 0x61, 0x27, 0xe9, 0x6b, 0xf0, 0x57, 0x87, 0xa1, 0x27, 0x10, 0xae, 0x70, 0x59, 0xd2, 0x42,
	0xa6, 0x0b, 0xfa, 0x51, 0x54, 0x34, 0xea, 0x0d, 0x2e, 0x86, 0x7e, 0x12, 0x38, 0x74, 0x62, 0x40,
	0xf4, 0x0a, 0x7a, 0x3a, 0x81, 0x5a, 0x46, 0x57, 0x03, 0x6f, 0x78, 0xf3, 0xf2, 0xbb, 0xd1, 0x81,
	0x0e, 0x8d, 0xde, 0x1b, 0x5a, 0xe2, 0xe8, 0x08, 0xc1, 0xa5, 0xc2, 0x4b, 0x19, 0x5d, 0x1b, 0x57,
	0xf3, 0x8d, 0xa6, 0x00, 0xa2, 0x22, 0xb4, 0x4a, 0x75, 0xc7, 0x23, 0xdf, 0x18, 0xc6, 0x07, 0x0d,
	0xdf, 0x69, 0xaa, 0xae, 0xd6, 0xef, 0x5f, 0x24, 0xbe, 0x68, 0x02, 0xf4, 0x1e, 0xee, 0x08, 0xcd,
	0xd6, 0x29, 0xc7, 0x5b, 0x51, 0x2b, 0x6b, 0x05, 0xc6, 0xea, 0x87, 0x83, 0x56, 0x6f, 0x68, 0xb6,
	0xbe, 0x37, 0x7c, 0xe7, 0x17, 0x92, 0x3d, 0x04, 0xcd, 0xe1, 0xb6, 0xe4, 0x58, 0xd1, 0xb4, 0xac,
	0x68, 0x69, 0x3d, 0x6f, 0x8c, 0xe7, 0xd3, 0x83, 0x9e, 0x73, 0xcd, 0x9f, 0x57, 0xb4, 0x74, 0x96,
	0x41, 0xb9, 0x0b, 0xa0, 0x7b, 0x08, 0x88, 0xc8, 0xea, 0x9c, 0x16, 0x6e, 0x8f, 0x7d, 0xe3, 0xf7,
	0xe4, 0xf0, 0x1e, 0x1d, 0xdb, 0xd9, 0xf5, 0xc9, 0x4e, 0xac, 0x2b, 0x97, 0xb3, 0x4f, 0x4d, 0xe5,
	0x82, 0x13, 0x95, 0x7b, 0xab, 0xa9, 0x4d, 0xe5, 0xf2, 0x26, 0xd0, 0x49, 0xe6, 0xb8, 0xa8, 0x31,
	0x4f, 0xab, 0xba, 0xb0, 0x4e, 0xe1, 0x89, 0x24, 0xdf, 0x1a, 0x7e, 0x52, 0x17, 0x4d, 0x92, 0xf9,
	0x2e, 0xa0, 0x93, 0x64, 0x45, 0x56, 0x2f, 0x74, 0xe5, 0x8c, 0xdf, 0xed, 0x89, 0x24, 0x67, 0x8e,
	0xdd, 0x24, 0xc9, 0x76, 0x62, 0xd3, 0x59, 0xac, 0x70, 0x5a, 0x97, 0x5c, 0x60, 0x62, 0x0d, 0xef,
	0x4e, 0x75, 0x16, 0x2b, 0xfc, 0x87, 0xe1, 0xb7, 0x9d, 0xdd, 0x43, 0x26, 0x3d, 0x3d, 0x87, 0x72,
	0x1d, 0x3f, 0x07, 0xbf, 0x1d, 0x28, 0x7d, 0x42, 0xda, 0xc3, 0x9f, 0x32, 0x22, 0x23, 0xcf, 0x4c,
	0x69, 0xbf, 0x05, 0x67, 0x44, 0xc6, 0x7f, 0x7b, 0x10, 0xee, 0x0f, 0x0e, 0x8a, 0x21, 0x78, 0x68,
	0x43, 0xda, 0x9e, 0xe0, 0x9b, 0xb6, 0xc6, 0x33, 0x82, 0xee, 0x21, 0x94, 0x22, 0xa7, 0x69, 0x29,
	0x24, 0x53, 0x4c, 0x14, 0x32, 0xea, 0x0c, 0x2e, 0x8e, 0x16, 0xe5, 0x5d, 0x45, 0x58, 0x81, 0xf9,
	0x54, 0x5f, 0x5f, 0x49, 0xa0, 0xc5, 0xf3, 0x46, 0x1b, 0x7f, 0x80, 0x60, 0x6f, 0xd0, 0xd0, 0x14,
	0x6e, 0x1e, 0x26, 0xd5, 0x6e, 0xfc, 0xd8, 0x28, 0xb4, 0xe2, 0x04, 0xda, 0xf9, 0x94, 0x31, 0x07,
	0xbf, 0x5d, 0x40, 0xdf, 0xc0, 0xb5, 0x75, 0x6c, 0xf3, 0xb9, 0x32, 0xf1, 0x8c, 0xa0, 0x37, 0x00,
	0x26, 0x97, 0xbf, 0x28, 0xe7, 0x9f, 0x99, 0x87, 0xaf, 0x85, 0x7f, 0x6a, 0x5d, 0xfc, 0x23, 0xf4,
	0x77, 0x87, 0x5b, 0x5f, 0x5e, 0x8a, 0x7e, 0x52, 0xe9, 0x42, 0x90, 0xad, 0xfb, 0xe3, 0xb5, 0x06,
	0x26, 0x82, 0x6c, 0xe3, 0x7f, 0x3d, 0xf0, 0xdb, 0xf9, 0x45, 0xaf, 0xa1, 0xe7, 0x6e, 0x27, 0x9b,
	0xe8, 0xe3, 0xe3, 0x33, 0xaf, 0xef, 0x20, 0x9a, 0x38, 0x09, 0xfa, 0x19, 0xba, 0xf8, 0xa3, 0xa2,
	0x95, 0xdb, 0xf8, 0x59, 0x5a, 0xab, 0x40, 0xaf, 0xa0, 0x9b, 0x61, 0x6e, 0xee, 0x5d, 0x2d, 0xfd,
	0xfe, 0xa0, 0xf4, 0xb7, 0xaa, 0xcc, 0xa6, 0x98, 0xf3, 0xc4, 0xf2, 0xe3, 0x7f, 0x3c, 0x80, 0x07,
	0x3b, 0xf4, 0x0b, 0x74, 0x99, 0xa2, 0x79, 0xd3, 0xa7, 0xa7, 0x47, 0x0e, 0x46, 0x33, 0x79, 0x8a,
	0xe6, 0x89, 0x15, 0xa1, 0x09, 0xe8, 0xa6, 0x65, 0x54, 0x57, 0xae, 0x29, 0xff, 0xd1, 0x56, 0x5b,
	0x6a, 0xb2, 0xa3, 0x8a, 0x37, 0xa6, 0xd5, 0x36, 0x42, 0x5f, 0x41, 0xaf, 0xc4, 0x15, 0x2d, 0x94,
	0x2b, 0xbb, 0x8b, 0xf4, 0xf3, 0x93, 0xad, 0x18, 0x27, 0xcd, 0xf3, 0x63, 0x02, 0xf4, 0x1a, 0xba,
	0xe6, 0x49, 0x35, 0x8f, 0xcf, 0xd9, 0x8d, 0xb7, 0x9a, 0xf8, 0x16, 0x82, 0xbd, 0xcb, 0x23, 0x0e,
	0xa1, 0xbf, 0x7b, 0xfa, 0xe3, 0x3b, 0x08, 0xf7, 0x0f, 0xef, 0xa2, 0x67, 0x1e, 0xc9, 0x9f, 0xfe,
	0x0f, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xa5, 0x44, 0xc2, 0x34, 0x08, 0x00, 0x00,
}
