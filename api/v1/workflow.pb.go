// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/jkmathew/antha/api/v1/workflow.proto

package org_antha_lang_antha_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Workflow struct {
	Id          string              `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Label       string              `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Description string              `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Processes   map[string]*Element `protobuf:"bytes,4,rep,name=processes" json:"processes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Connections []*Connection       `protobuf:"bytes,5,rep,name=connections" json:"connections,omitempty"`
}

func (m *Workflow) Reset()                    { *m = Workflow{} }
func (m *Workflow) String() string            { return proto.CompactTextString(m) }
func (*Workflow) ProtoMessage()               {}
func (*Workflow) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *Workflow) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Workflow) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Workflow) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Workflow) GetProcesses() map[string]*Element {
	if m != nil {
		return m.Processes
	}
	return nil
}

func (m *Workflow) GetConnections() []*Connection {
	if m != nil {
		return m.Connections
	}
	return nil
}

type Element struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Element) Reset()                    { *m = Element{} }
func (m *Element) String() string            { return proto.CompactTextString(m) }
func (*Element) ProtoMessage()               {}
func (*Element) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *Element) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Connection struct {
	Source *ProcessAddress `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Target *ProcessAddress `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (m *Connection) Reset()                    { *m = Connection{} }
func (m *Connection) String() string            { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()               {}
func (*Connection) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *Connection) GetSource() *ProcessAddress {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Connection) GetTarget() *ProcessAddress {
	if m != nil {
		return m.Target
	}
	return nil
}

type ProcessAddress struct {
	Process string `protobuf:"bytes,1,opt,name=process" json:"process,omitempty"`
	Port    string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
}

func (m *ProcessAddress) Reset()                    { *m = ProcessAddress{} }
func (m *ProcessAddress) String() string            { return proto.CompactTextString(m) }
func (*ProcessAddress) ProtoMessage()               {}
func (*ProcessAddress) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *ProcessAddress) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

func (m *ProcessAddress) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type MixerConfig struct {
	InputPlates          []*InventoryItem `protobuf:"bytes,1,rep,name=input_plates,json=inputPlates" json:"input_plates,omitempty"`
	OutputPlates         []*InventoryItem `protobuf:"bytes,2,rep,name=output_plates,json=outputPlates" json:"output_plates,omitempty"`
	InputPlateTypes      []string         `protobuf:"bytes,3,rep,name=input_plate_types,json=inputPlateTypes" json:"input_plate_types,omitempty"`
	OutputPlateTypes     []string         `protobuf:"bytes,4,rep,name=output_plate_types,json=outputPlateTypes" json:"output_plate_types,omitempty"`
	TipTypes             []string         `protobuf:"bytes,5,rep,name=tip_types,json=tipTypes" json:"tip_types,omitempty"`
	MaxPlates            int32            `protobuf:"varint,6,opt,name=max_plates,json=maxPlates" json:"max_plates,omitempty"`
	MaxWells             int32            `protobuf:"varint,7,opt,name=max_wells,json=maxWells" json:"max_wells,omitempty"`
	ResidualVolumeWeight float64          `protobuf:"fixed64,8,opt,name=residual_volume_weight,json=residualVolumeWeight" json:"residual_volume_weight,omitempty"`
	// int32 planning_version = 9;
	ModelEvaporation bool `protobuf:"varint,10,opt,name=model_evaporation,json=modelEvaporation" json:"model_evaporation,omitempty"`
	OutputSort       bool `protobuf:"varint,11,opt,name=output_sort,json=outputSort" json:"output_sort,omitempty"`
	// Driver specific options. Semantics are not stable. Will need to be
	// revised when multi device execution is supported.
	DriverSpecificInputPreferences    []string `protobuf:"bytes,12,rep,name=driver_specific_input_preferences,json=driverSpecificInputPreferences" json:"driver_specific_input_preferences,omitempty"`
	DriverSpecificOutputPreferences   []string `protobuf:"bytes,13,rep,name=driver_specific_output_preferences,json=driverSpecificOutputPreferences" json:"driver_specific_output_preferences,omitempty"`
	DriverSpecificTipPreferences      []string `protobuf:"bytes,14,rep,name=driver_specific_tip_preferences,json=driverSpecificTipPreferences" json:"driver_specific_tip_preferences,omitempty"`
	DriverSpecificTipWastePreferences []string `protobuf:"bytes,15,rep,name=driver_specific_tip_waste_preferences,json=driverSpecificTipWastePreferences" json:"driver_specific_tip_waste_preferences,omitempty"`
	DriverSpecificWashPreferences     []string `protobuf:"bytes,16,rep,name=driver_specific_wash_preferences,json=driverSpecificWashPreferences" json:"driver_specific_wash_preferences,omitempty"`
	PlanningVersion                   string   `protobuf:"bytes,17,opt,name=planning_version,json=planningVersion" json:"planning_version,omitempty"`
	UseDriverTipTracking              bool     `protobuf:"varint,18,opt,name=use_driver_tip_tracking,json=useDriverTipTracking" json:"use_driver_tip_tracking,omitempty"`
}

func (m *MixerConfig) Reset()                    { *m = MixerConfig{} }
func (m *MixerConfig) String() string            { return proto.CompactTextString(m) }
func (*MixerConfig) ProtoMessage()               {}
func (*MixerConfig) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *MixerConfig) GetInputPlates() []*InventoryItem {
	if m != nil {
		return m.InputPlates
	}
	return nil
}

func (m *MixerConfig) GetOutputPlates() []*InventoryItem {
	if m != nil {
		return m.OutputPlates
	}
	return nil
}

func (m *MixerConfig) GetInputPlateTypes() []string {
	if m != nil {
		return m.InputPlateTypes
	}
	return nil
}

func (m *MixerConfig) GetOutputPlateTypes() []string {
	if m != nil {
		return m.OutputPlateTypes
	}
	return nil
}

func (m *MixerConfig) GetTipTypes() []string {
	if m != nil {
		return m.TipTypes
	}
	return nil
}

func (m *MixerConfig) GetMaxPlates() int32 {
	if m != nil {
		return m.MaxPlates
	}
	return 0
}

func (m *MixerConfig) GetMaxWells() int32 {
	if m != nil {
		return m.MaxWells
	}
	return 0
}

func (m *MixerConfig) GetResidualVolumeWeight() float64 {
	if m != nil {
		return m.ResidualVolumeWeight
	}
	return 0
}

func (m *MixerConfig) GetModelEvaporation() bool {
	if m != nil {
		return m.ModelEvaporation
	}
	return false
}

func (m *MixerConfig) GetOutputSort() bool {
	if m != nil {
		return m.OutputSort
	}
	return false
}

func (m *MixerConfig) GetDriverSpecificInputPreferences() []string {
	if m != nil {
		return m.DriverSpecificInputPreferences
	}
	return nil
}

func (m *MixerConfig) GetDriverSpecificOutputPreferences() []string {
	if m != nil {
		return m.DriverSpecificOutputPreferences
	}
	return nil
}

func (m *MixerConfig) GetDriverSpecificTipPreferences() []string {
	if m != nil {
		return m.DriverSpecificTipPreferences
	}
	return nil
}

func (m *MixerConfig) GetDriverSpecificTipWastePreferences() []string {
	if m != nil {
		return m.DriverSpecificTipWastePreferences
	}
	return nil
}

func (m *MixerConfig) GetDriverSpecificWashPreferences() []string {
	if m != nil {
		return m.DriverSpecificWashPreferences
	}
	return nil
}

func (m *MixerConfig) GetPlanningVersion() string {
	if m != nil {
		return m.PlanningVersion
	}
	return ""
}

func (m *MixerConfig) GetUseDriverTipTracking() bool {
	if m != nil {
		return m.UseDriverTipTracking
	}
	return false
}

func init() {
	proto.RegisterType((*Workflow)(nil), "org.antha_lang.antha.v1.Workflow")
	proto.RegisterType((*Element)(nil), "org.antha_lang.antha.v1.Element")
	proto.RegisterType((*Connection)(nil), "org.antha_lang.antha.v1.Connection")
	proto.RegisterType((*ProcessAddress)(nil), "org.antha_lang.antha.v1.ProcessAddress")
	proto.RegisterType((*MixerConfig)(nil), "org.antha_lang.antha.v1.MixerConfig")
}

func init() { proto.RegisterFile("github.com/jkmathew/antha/api/v1/workflow.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 747 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x6d, 0x6f, 0xe3, 0x44,
	0x10, 0xc7, 0xe5, 0xa4, 0x69, 0x93, 0x71, 0xaf, 0x4d, 0x57, 0x15, 0x67, 0xee, 0x38, 0xea, 0x0b,
	0x02, 0xc2, 0x53, 0x4a, 0xcb, 0x83, 0x10, 0x2f, 0x40, 0xe8, 0x88, 0x50, 0x74, 0x02, 0x2a, 0x5f,
	0x75, 0x79, 0x87, 0xb5, 0xb5, 0xa7, 0xce, 0xaa, 0xf6, 0xae, 0xb5, 0xbb, 0x76, 0x92, 0x2f, 0xc1,
	0xe7, 0xe1, 0x2b, 0xf0, 0xad, 0x90, 0xd7, 0xeb, 0x8b, 0x13, 0x88, 0x74, 0xbc, 0xdb, 0x9d, 0xff,
	0x7f, 0x7e, 0x33, 0x3b, 0xbb, 0x36, 0x5c, 0x25, 0x4c, 0x2f, 0x8a, 0xbb, 0x49, 0x24, 0xb2, 0x4b,
	0xca, 0xf5, 0x82, 0x7e, 0x91, 0x52, 0x9e, 0xd4, 0xcb, 0x4b, 0x9a, 0xb3, 0xcb, 0xf2, 0xea, 0x72,
	0x29, 0xe4, 0xc3, 0x7d, 0x2a, 0x96, 0x93, 0x5c, 0x0a, 0x2d, 0xc8, 0x63, 0x21, 0x93, 0x89, 0x31,
	0x84, 0x95, 0xb7, 0x5e, 0x4e, 0xca, 0xab, 0x27, 0xd7, 0x6f, 0xc1, 0x62, 0xbc, 0x44, 0xae, 0x85,
	0x5c, 0xd7, 0xb0, 0xd1, 0xdf, 0x1d, 0xe8, 0xcf, 0x2d, 0x9f, 0x9c, 0x40, 0x87, 0xc5, 0x9e, 0xe3,
	0x3b, 0xe3, 0x41, 0xd0, 0x61, 0x31, 0x39, 0x87, 0x5e, 0x4a, 0xef, 0x30, 0xf5, 0x3a, 0x26, 0x54,
	0x6f, 0x88, 0x0f, 0x6e, 0x8c, 0x2a, 0x92, 0x2c, 0xd7, 0x4c, 0x70, 0xaf, 0x6b, 0xb4, 0x76, 0x88,
	0xfc, 0x06, 0x83, 0x5c, 0x8a, 0x08, 0x95, 0x42, 0xe5, 0x1d, 0xf8, 0xdd, 0xb1, 0x7b, 0xfd, 0xe5,
	0x64, 0x4f, 0xd7, 0x93, 0xa6, 0xfa, 0xe4, 0xa6, 0x49, 0x99, 0x72, 0x2d, 0xd7, 0xc1, 0x06, 0x41,
	0xa6, 0xe0, 0x46, 0x82, 0x73, 0x8c, 0x2a, 0xba, 0xf2, 0x7a, 0x86, 0xf8, 0xc1, 0x5e, 0xe2, 0x8b,
	0x37, 0xde, 0xa0, 0x9d, 0xf7, 0xe4, 0x0f, 0x38, 0xd9, 0xae, 0x41, 0x86, 0xd0, 0x7d, 0xc0, 0xb5,
	0x3d, 0x71, 0xb5, 0x24, 0xdf, 0x42, 0xaf, 0xa4, 0x69, 0x81, 0xe6, 0xc8, 0xee, 0xb5, 0xbf, 0xb7,
	0xc8, 0x34, 0xc5, 0x0c, 0xb9, 0x0e, 0x6a, 0xfb, 0xf7, 0x9d, 0xef, 0x9c, 0xd1, 0xbb, 0x70, 0x64,
	0xa3, 0xbb, 0x93, 0x1c, 0xfd, 0xe9, 0x00, 0x6c, 0xda, 0x22, 0x3f, 0xc2, 0xa1, 0x12, 0x85, 0x8c,
	0xd0, 0x58, 0xdc, 0xeb, 0x8f, 0xf7, 0x96, 0xb1, 0x0d, 0xff, 0x14, 0xc7, 0x12, 0x95, 0x0a, 0x6c,
	0x5a, 0x05, 0xd0, 0x54, 0x26, 0xa8, 0x6d, 0x9f, 0x6f, 0x0f, 0xa8, 0xd3, 0x46, 0x3f, 0xbc, 0x99,
	0x85, 0x55, 0x88, 0x07, 0x47, 0x76, 0xe2, 0xb6, 0xef, 0x66, 0x4b, 0x08, 0x1c, 0xe4, 0x42, 0x6a,
	0xfb, 0x0a, 0xcc, 0x7a, 0xf4, 0xd7, 0x11, 0xb8, 0xbf, 0xb2, 0x15, 0xca, 0x17, 0x82, 0xdf, 0xb3,
	0x84, 0xcc, 0xe0, 0x98, 0xf1, 0xbc, 0xd0, 0x61, 0x9e, 0x52, 0x8d, 0x15, 0xa2, 0xba, 0xa3, 0x8f,
	0xf6, 0xb6, 0x35, 0x6b, 0xde, 0xe1, 0x4c, 0x63, 0x16, 0xb8, 0x26, 0xf7, 0xc6, 0xa4, 0x92, 0x97,
	0xf0, 0x48, 0x14, 0xba, 0xc5, 0xea, 0xfc, 0x2f, 0xd6, 0x71, 0x9d, 0x6c, 0x61, 0x9f, 0xc2, 0x59,
	0xab, 0xaf, 0x50, 0xaf, 0x73, 0x54, 0x5e, 0xd7, 0xef, 0x8e, 0x07, 0xc1, 0xe9, 0xa6, 0xe8, 0x6d,
	0x15, 0x26, 0x9f, 0x03, 0x69, 0x17, 0xb6, 0xe6, 0x03, 0x63, 0x1e, 0xb6, 0xa8, 0xb5, 0xfb, 0x29,
	0x0c, 0x34, 0xcb, 0xad, 0xa9, 0x67, 0x4c, 0x7d, 0xcd, 0xf2, 0x5a, 0x7c, 0x06, 0x90, 0xd1, 0x55,
	0x73, 0x80, 0x43, 0xdf, 0x19, 0xf7, 0x82, 0x41, 0x46, 0x57, 0xb6, 0xab, 0xa7, 0x50, 0x6d, 0xc2,
	0x25, 0xa6, 0xa9, 0xf2, 0x8e, 0x8c, 0xda, 0xcf, 0xe8, 0x6a, 0x5e, 0xed, 0xc9, 0xd7, 0xf0, 0x8e,
	0x44, 0xc5, 0xe2, 0x82, 0xa6, 0x61, 0x29, 0xd2, 0x22, 0xc3, 0x70, 0x89, 0x2c, 0x59, 0x68, 0xaf,
	0xef, 0x3b, 0x63, 0x27, 0x38, 0x6f, 0xd4, 0xd7, 0x46, 0x9c, 0x1b, 0x8d, 0x7c, 0x06, 0x67, 0x99,
	0x88, 0x31, 0x0d, 0xb1, 0xa4, 0xb9, 0x90, 0xd4, 0x7c, 0x9b, 0xe0, 0x3b, 0xe3, 0x7e, 0x30, 0x34,
	0xc2, 0x74, 0x13, 0x27, 0x17, 0xe0, 0xda, 0x93, 0xaa, 0xea, 0x62, 0x5d, 0x63, 0x83, 0x3a, 0xf4,
	0x4a, 0x48, 0x4d, 0x66, 0xf0, 0x3c, 0x96, 0xac, 0x44, 0x19, 0xaa, 0x1c, 0x23, 0x76, 0xcf, 0xa2,
	0xd0, 0x8e, 0x51, 0xe2, 0x3d, 0x4a, 0xe4, 0x11, 0x2a, 0xef, 0xd8, 0x1c, 0xfa, 0xfd, 0xda, 0xf8,
	0xca, 0xfa, 0x66, 0x66, 0xa8, 0x1b, 0x17, 0x79, 0x09, 0xa3, 0x5d, 0x54, 0x33, 0xe5, 0x16, 0xeb,
	0x91, 0x61, 0x5d, 0x6c, 0xb3, 0x7e, 0xaf, 0x67, 0xde, 0x82, 0x4d, 0xe1, 0x62, 0x17, 0x56, 0x5d,
	0x42, 0x9b, 0x74, 0x62, 0x48, 0xef, 0x6d, 0x93, 0x6e, 0x59, 0xde, 0xc6, 0xdc, 0xc0, 0x87, 0xff,
	0x85, 0x59, 0x52, 0xa5, 0x71, 0x0b, 0x76, 0x6a, 0x60, 0xcf, 0xff, 0x05, 0x9b, 0x57, 0xce, 0x36,
	0xf1, 0x17, 0xf0, 0x77, 0x89, 0x4b, 0xaa, 0x16, 0x5b, 0xb0, 0xa1, 0x81, 0x3d, 0xdb, 0x86, 0xcd,
	0xa9, 0x5a, 0xb4, 0x41, 0x9f, 0xc0, 0x30, 0x4f, 0x29, 0xe7, 0x8c, 0x27, 0x61, 0x89, 0x52, 0x55,
	0xd7, 0x78, 0x66, 0x3e, 0xbc, 0xd3, 0x26, 0xfe, 0xba, 0x0e, 0x93, 0x6f, 0xe0, 0x71, 0xa1, 0x30,
	0xb4, 0x75, 0xcd, 0x63, 0x94, 0x34, 0x7a, 0x60, 0x3c, 0xf1, 0x88, 0xb9, 0xd1, 0xf3, 0x42, 0xe1,
	0xcf, 0x46, 0xbd, 0x65, 0xf9, 0xad, 0xd5, 0xee, 0x0e, 0xcd, 0x9f, 0xff, 0xab, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xa1, 0x52, 0xe6, 0x2d, 0x7b, 0x06, 0x00, 0x00,
}
