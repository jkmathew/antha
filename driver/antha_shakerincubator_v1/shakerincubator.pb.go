// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/jkmathew/antha/driver/antha_shakerincubator_v1/shakerincubator.proto

/*
Package antha_shakerincubator_v1 is a generated protocol buffer package.

It is generated from these files:
	github.com/jkmathew/antha/driver/antha_shakerincubator_v1/shakerincubator.proto

It has these top-level messages:
	BoolReply
	ShakerSettings
	TemperatureSettings
	Blank
*/
package antha_shakerincubator_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BoolReply struct {
	Result bool `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *BoolReply) Reset()                    { *m = BoolReply{} }
func (m *BoolReply) String() string            { return proto.CompactTextString(m) }
func (*BoolReply) ProtoMessage()               {}
func (*BoolReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BoolReply) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type ShakerSettings struct {
	Frequency float64 `protobuf:"fixed64,1,opt,name=frequency" json:"frequency,omitempty"`
	Radius    float64 `protobuf:"fixed64,2,opt,name=radius" json:"radius,omitempty"`
}

func (m *ShakerSettings) Reset()                    { *m = ShakerSettings{} }
func (m *ShakerSettings) String() string            { return proto.CompactTextString(m) }
func (*ShakerSettings) ProtoMessage()               {}
func (*ShakerSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ShakerSettings) GetFrequency() float64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *ShakerSettings) GetRadius() float64 {
	if m != nil {
		return m.Radius
	}
	return 0
}

type TemperatureSettings struct {
	Temperature float64 `protobuf:"fixed64,1,opt,name=temperature" json:"temperature,omitempty"`
}

func (m *TemperatureSettings) Reset()                    { *m = TemperatureSettings{} }
func (m *TemperatureSettings) String() string            { return proto.CompactTextString(m) }
func (*TemperatureSettings) ProtoMessage()               {}
func (*TemperatureSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TemperatureSettings) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

type Blank struct {
}

func (m *Blank) Reset()                    { *m = Blank{} }
func (m *Blank) String() string            { return proto.CompactTextString(m) }
func (*Blank) ProtoMessage()               {}
func (*Blank) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*BoolReply)(nil), "antha.shakerincubator.v1.BoolReply")
	proto.RegisterType((*ShakerSettings)(nil), "antha.shakerincubator.v1.ShakerSettings")
	proto.RegisterType((*TemperatureSettings)(nil), "antha.shakerincubator.v1.TemperatureSettings")
	proto.RegisterType((*Blank)(nil), "antha.shakerincubator.v1.Blank")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ShakerIncubator service

type ShakerIncubatorClient interface {
	Connect(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error)
	Disconnect(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error)
	Test(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error)
	CarrierOpen(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error)
	CarrierClose(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error)
	ShakeStart(ctx context.Context, in *ShakerSettings, opts ...grpc.CallOption) (*BoolReply, error)
	ShakeStop(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error)
	TemperatureSet(ctx context.Context, in *TemperatureSettings, opts ...grpc.CallOption) (*BoolReply, error)
	TemperatureReset(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error)
}

type shakerIncubatorClient struct {
	cc *grpc.ClientConn
}

func NewShakerIncubatorClient(cc *grpc.ClientConn) ShakerIncubatorClient {
	return &shakerIncubatorClient{cc}
}

func (c *shakerIncubatorClient) Connect(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/antha.shakerincubator.v1.ShakerIncubator/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shakerIncubatorClient) Disconnect(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/antha.shakerincubator.v1.ShakerIncubator/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shakerIncubatorClient) Test(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/antha.shakerincubator.v1.ShakerIncubator/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shakerIncubatorClient) CarrierOpen(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/antha.shakerincubator.v1.ShakerIncubator/CarrierOpen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shakerIncubatorClient) CarrierClose(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/antha.shakerincubator.v1.ShakerIncubator/CarrierClose", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shakerIncubatorClient) ShakeStart(ctx context.Context, in *ShakerSettings, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/antha.shakerincubator.v1.ShakerIncubator/ShakeStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shakerIncubatorClient) ShakeStop(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/antha.shakerincubator.v1.ShakerIncubator/ShakeStop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shakerIncubatorClient) TemperatureSet(ctx context.Context, in *TemperatureSettings, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/antha.shakerincubator.v1.ShakerIncubator/TemperatureSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shakerIncubatorClient) TemperatureReset(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/antha.shakerincubator.v1.ShakerIncubator/TemperatureReset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShakerIncubator service

type ShakerIncubatorServer interface {
	Connect(context.Context, *Blank) (*BoolReply, error)
	Disconnect(context.Context, *Blank) (*BoolReply, error)
	Test(context.Context, *Blank) (*BoolReply, error)
	CarrierOpen(context.Context, *Blank) (*BoolReply, error)
	CarrierClose(context.Context, *Blank) (*BoolReply, error)
	ShakeStart(context.Context, *ShakerSettings) (*BoolReply, error)
	ShakeStop(context.Context, *Blank) (*BoolReply, error)
	TemperatureSet(context.Context, *TemperatureSettings) (*BoolReply, error)
	TemperatureReset(context.Context, *Blank) (*BoolReply, error)
}

func RegisterShakerIncubatorServer(s *grpc.Server, srv ShakerIncubatorServer) {
	s.RegisterService(&_ShakerIncubator_serviceDesc, srv)
}

func _ShakerIncubator_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShakerIncubatorServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antha.shakerincubator.v1.ShakerIncubator/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShakerIncubatorServer).Connect(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShakerIncubator_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShakerIncubatorServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antha.shakerincubator.v1.ShakerIncubator/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShakerIncubatorServer).Disconnect(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShakerIncubator_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShakerIncubatorServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antha.shakerincubator.v1.ShakerIncubator/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShakerIncubatorServer).Test(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShakerIncubator_CarrierOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShakerIncubatorServer).CarrierOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antha.shakerincubator.v1.ShakerIncubator/CarrierOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShakerIncubatorServer).CarrierOpen(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShakerIncubator_CarrierClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShakerIncubatorServer).CarrierClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antha.shakerincubator.v1.ShakerIncubator/CarrierClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShakerIncubatorServer).CarrierClose(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShakerIncubator_ShakeStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShakerSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShakerIncubatorServer).ShakeStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antha.shakerincubator.v1.ShakerIncubator/ShakeStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShakerIncubatorServer).ShakeStart(ctx, req.(*ShakerSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShakerIncubator_ShakeStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShakerIncubatorServer).ShakeStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antha.shakerincubator.v1.ShakerIncubator/ShakeStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShakerIncubatorServer).ShakeStop(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShakerIncubator_TemperatureSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemperatureSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShakerIncubatorServer).TemperatureSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antha.shakerincubator.v1.ShakerIncubator/TemperatureSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShakerIncubatorServer).TemperatureSet(ctx, req.(*TemperatureSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShakerIncubator_TemperatureReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShakerIncubatorServer).TemperatureReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antha.shakerincubator.v1.ShakerIncubator/TemperatureReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShakerIncubatorServer).TemperatureReset(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShakerIncubator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "antha.shakerincubator.v1.ShakerIncubator",
	HandlerType: (*ShakerIncubatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _ShakerIncubator_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _ShakerIncubator_Disconnect_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _ShakerIncubator_Test_Handler,
		},
		{
			MethodName: "CarrierOpen",
			Handler:    _ShakerIncubator_CarrierOpen_Handler,
		},
		{
			MethodName: "CarrierClose",
			Handler:    _ShakerIncubator_CarrierClose_Handler,
		},
		{
			MethodName: "ShakeStart",
			Handler:    _ShakerIncubator_ShakeStart_Handler,
		},
		{
			MethodName: "ShakeStop",
			Handler:    _ShakerIncubator_ShakeStop_Handler,
		},
		{
			MethodName: "TemperatureSet",
			Handler:    _ShakerIncubator_TemperatureSet_Handler,
		},
		{
			MethodName: "TemperatureReset",
			Handler:    _ShakerIncubator_TemperatureReset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/jkmathew/antha/driver/antha_shakerincubator_v1/shakerincubator.proto",
}

func init() {
	proto.RegisterFile("github.com/jkmathew/antha/driver/antha_shakerincubator_v1/shakerincubator.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x5f, 0x4b, 0x32, 0x41,
	0x14, 0xc6, 0x5f, 0x5f, 0x4a, 0xf3, 0x18, 0x16, 0x13, 0x84, 0x44, 0x90, 0xac, 0x37, 0xde, 0xb8,
	0x62, 0x5d, 0x74, 0xaf, 0x11, 0x74, 0x53, 0xb8, 0x6b, 0x5d, 0x04, 0x21, 0xe3, 0x7a, 0xd4, 0xc1,
	0x75, 0x66, 0x3b, 0x33, 0x2b, 0xf8, 0xb1, 0xfa, 0x86, 0xc1, 0xb8, 0xe6, 0x1f, 0x32, 0xbc, 0x98,
	0xbb, 0x3d, 0xcf, 0x9c, 0xe7, 0xb7, 0xe7, 0xec, 0x3e, 0x0c, 0x74, 0xc7, 0xc2, 0x4c, 0xd2, 0x81,
	0x1f, 0xa9, 0x59, 0x93, 0x4b, 0x33, 0xe1, 0x8d, 0x98, 0xcb, 0xf1, 0xf2, 0xb1, 0x39, 0x24, 0x31,
	0x47, 0x5a, 0x16, 0x7d, 0x3d, 0xe1, 0x53, 0x24, 0x21, 0xa3, 0x74, 0xc0, 0x8d, 0xa2, 0xfe, 0xbc,
	0xd5, 0xdc, 0x91, 0xfc, 0x84, 0x94, 0x51, 0xac, 0x62, 0xfb, 0xfd, 0xdd, 0xc3, 0x79, 0xcb, 0xab,
	0x41, 0xb1, 0xad, 0x54, 0x1c, 0x60, 0x12, 0x2f, 0xd8, 0x25, 0xe4, 0x09, 0x75, 0x1a, 0x9b, 0x4a,
	0xae, 0x9a, 0xab, 0x9f, 0x04, 0x59, 0xe5, 0x3d, 0x42, 0x39, 0xb4, 0xd6, 0x10, 0x8d, 0x11, 0x72,
	0xac, 0xd9, 0x35, 0x14, 0x47, 0x84, 0x9f, 0x29, 0xca, 0x68, 0x61, 0x9b, 0x73, 0xc1, 0x5a, 0xb0,
	0x1c, 0x3e, 0x14, 0xa9, 0xae, 0xfc, 0xb7, 0x47, 0x59, 0xe5, 0xdd, 0xc3, 0x45, 0x0f, 0x67, 0x09,
	0x12, 0x37, 0x29, 0xe1, 0x0f, 0xac, 0x0a, 0x25, 0xb3, 0x96, 0x33, 0xdc, 0xa6, 0xe4, 0x15, 0xe0,
	0xb8, 0x1d, 0x73, 0x39, 0xbd, 0xfd, 0xca, 0xc3, 0xd9, 0x72, 0x94, 0xa7, 0xd5, 0x16, 0xac, 0x0b,
	0x85, 0x8e, 0x92, 0x12, 0x23, 0xc3, 0x6e, 0xfc, 0x7d, 0x8b, 0xfa, 0xd6, 0x7f, 0x55, 0xfb, 0xa3,
	0x61, 0xf5, 0x19, 0xbc, 0x7f, 0xac, 0x07, 0xf0, 0x20, 0x74, 0xe4, 0x98, 0xfa, 0x0c, 0x47, 0x3d,
	0xd4, 0xee, 0x78, 0xaf, 0x50, 0xea, 0x70, 0x22, 0x81, 0xf4, 0x92, 0xa0, 0x74, 0x86, 0x7d, 0x83,
	0xd3, 0x0c, 0xdb, 0x89, 0x95, 0x46, 0x67, 0xdc, 0x0f, 0x00, 0xfb, 0xeb, 0x42, 0xc3, 0xc9, 0xb0,
	0xfa, 0x7e, 0xd3, 0x76, 0xd6, 0x0e, 0xc5, 0x87, 0x50, 0xcc, 0xf0, 0x2a, 0x71, 0x36, 0xf3, 0x08,
	0xca, 0xdb, 0x89, 0x65, 0x8d, 0xfd, 0xc6, 0x5f, 0xb2, 0x7d, 0xe8, 0x7b, 0xde, 0xe1, 0x7c, 0xc3,
	0x1d, 0xa0, 0x46, 0x67, 0x31, 0x19, 0xe4, 0xed, 0x1d, 0x70, 0xf7, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0xe5, 0x93, 0xe7, 0x8b, 0x58, 0x04, 0x00, 0x00,
}
